BM is a three tier application on GCP that has a data persistence layer, a business logic layer and a user experience layer. The goal is to manage the budget lifecycle across one more annual operating plans.

Cost center - We will have a master list of cost centers which will be shown by cost center code and cost center name. We will have CRUD APIs for Cost Centers

Employees - Employees are users of this application. A user will be represented by LDAP, first name, last name, email, level, cost center code. We will also have an organization hierarchy that will have the manager employee relationship for the organization. The level for employees will be from 1 through 12. We will have CRUD APIs for employees and organization hierarchy

Annual operating plans definition - Annual operating plan (AOP) has a header and detail content. The header is represented by a name (Eg: AOP2024 or AOP2025), total amount and has the states draft, active and EOL. There can only be one active AOP at any given time. The user should be able to set the lifecycle of an AOP. You can reset a draft AOP to active or an EOL AOP to active. When the AOP is set to active, we should ensure that the total amounts across active budgets cannot exceed the total amount in active AOP. If there is no lifecycle stated, the default lifecycle will be draft when a new AOP is created. The AOP detail will have the AOP header reference, cost center and the amount for the cost center. When the AOP detail is updated, the total amount of AOP should be calculated and updated for the header so that the total amount is easily accessible. Once an AOP is in  the active state, no modification to the AOP amounts are permitted unless the process that is used to update the AOP is through a special process called Adjusted Plan. The specifics of Adjusted Plan will be discussed later in the doc. We will have CRUD APIs for AOP

Budgets - A budget is a line item of spend for an employee. Every employee can request for budget for themselves or for an employee within their org if they have reporting structure per the organization hierarchy. For every budget line we will assign a unique identifier. All budgets are associated with an AOP and the cost center is derived based on the employee. The total amounts in all the budgets for the AOP cannot exceed the total amount for the AOP should the AOP be active. For every budget line entry, the user will provide a project, a short description, the amount and the ldap of the employee responsible for budget. For every budget line, we will have purchase order amount. These amounts are typically referred to as actuals. The actuals cannot exceed the budget. We will have APIs to update actuals. The actuals update will be incremental meaning, we will get a purchase order to add an amount of say $30. All amounts are in us dollars. Here is the information we will collect for actuals:
Purchase orders: purchase order number, purchase order line number, requestor ldap, budget identifier (should be valid against the budgets we created), purchase item, amount, date. When adding purchase orders, we should ensure that the total across purchase orders for the budget-id cannot exceed the total amount on budget for that id.
We will have CRUD APIs for budgets and purchase orders. When any of the actuals are updated, we will summarize the totals for that budget id and update the budget. When updating budget, if any of the amounts exceed budget, we will raise and error and fail the API or show the user an error if they are using the front end

User experience: The user interface layer will be a angular js interface:
Capabilities supported: Manage user (CRUD), Manage org hierarchy (CRUD), Manage AOP Header (CRUD), Manage AOP Detail (CRUD), Manage Budget (CRUD), Manage Purchase Orders (CRUD) 

Website: The UX will be a website UX. Should be accessible from open internet.

Authentication: There is no active sign-on for this application. If the user enters “IKnowYou241202”, the system should know that they are a valid user and allow for subsequent operations. If the user does not enter this code, then the error should be displayed to state the they are not an authenticated user.

Reporting: The user should be able to report data fairly easily per the following:
Show me my organization: Show the organization hierarchy for the user. Note that if a person A reports to B and B reports to C, when the user C says show me my organization, the report should show the hierarchy of A to B and B to C. If C has D and E reporting to them, that should also be shown
Show me my budget: Show the budgets totals for the user. This should only include the total budgets across C, D and E per the above example. If D and E have additional reports, then those should be automatically included as well

The application will be a 3 tier application on GCP (Angular JS, Python, Cloud Spanner). The total number of users is only 10. We expect to manage about 1000 budget lines in total. The cost across all GCP services should not exceed $50. 




